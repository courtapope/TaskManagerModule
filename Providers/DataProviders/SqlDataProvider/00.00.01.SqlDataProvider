/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/* check if the TaskManagerModule_Task table exists, if so, drop it before creating it. */

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}TaskManagerModule_Task]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}TaskManagerModule_Task]
GO


CREATE TABLE {databaseOwner}{objectQualifier}TaskManagerModule_Task
	(
	TaskId int NOT NULL IDENTITY (1, 1),
	TaskName nvarchar(MAX) NOT NULL,
	TaskDescription nvarchar(MAX) NOT NULL,
	AssignedUserId int NULL,
	ModuleID int NOT NULL,
	TargetCompletionDate datetime NULL,
	CompletedOnDate datetime NULL,
	ContentItemId int NULL,
	CreatedOnDate datetime NOT NULL,
	CreatedByUserId int NOT NULL,
	LastModifiedOnDate datetime NOT NULL,
	LastmodifiedByUserId int NOT NULL
	)	ON [PRIMARY]
	 TEXTIMAGE_ON [PRIMARY]
GO


ALTER TABLE {databaseOwner}{objectQualifier}TaskManagerModule_Task ADD CONSTRAINT
	PK_{objectQualifier}TaskManagerModule_Task PRIMARY KEY CLUSTERED
	(
	TaskId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO



IF EXISTS(SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}TaskManagerModule_AddTask') and OBJECTPROPERTY(id, N'IsProcedure')=1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_AddTask
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_AddTask

@TaskName nvarchar(max)
, @TaskDescription nvarchar(max)
, @AssignedUserId int
, @ModuleId int
, @TargetCompletionDate datetime
, @CompletedOnDate datetime
, @CreatedByUserId int

AS
INSERT INTO {databaseOwner}[{objectQualifier}TaskManagerModule_Task]
         ([TaskName]
         ,[TaskDescription]
         ,[AssignedUserId]
         ,[ModuleId]
         ,[TargetCompletionDate]
         ,[CompletedOnDate]
		 ,[ContentItemId]
         ,[CreatedOnDate]
         ,[CreatedByUserId]
         ,[LastModifiedOnDate]
         ,[LastModifiedByUserId])
   VALUES
     (@TaskName
           , @TaskDescription
           , @AssignedUserId
           , @ModuleId
           , @TargetCompletionDate
           , @CompletedOnDate
		   , -1 --ContentItemId will be updated later
           , GETDATE()
           , @CreatedByUserId
           , GETDATE()
           , @CreatedByUserId
           )

--return the ID of the task back so we can create a ContentItemId
Select @@Identity

GO

IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id= object_id(N'{databaseOwner}{objectQualifier}TaskManagerModule_UpdateTask') and OBJECTPROPERTY(id, N'IsProcedure')=1)
	DROP PROCEDURE {objectQualifier}TaskManagerModule_UpdateTask
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_UpdateTask
	@TaskId int
	, @TaskName nvarchar(MAX)
	, @TaskDescription nvarchar(MAX)
	, @AssignedUserId int
	, @ModuleId int
	, @TargetCompletionDate datetime
	, @CompletedOnDate datetime
	, @ContentItemId int
	, @LastModifiedByUserId int


AS
UPDATE {databaseOwner}[{objectQualifier}TaskManagerModule_Task]
	Set
	TaskName = @TaskName
	, TaskDescription = @TaskDescription
	, AssignedUserId = @AssignedUserId
	, ModuleId = @ModuleId
	, TargetCompletionDate = @TargetCompletionDate
	, CompletedOnDate = @CompletedOnDate
	, ContentItemId = @ContentItemId
	, LastModifiedOnDate = GETDATE()
	, LastModifiedByUserId = @LastModifiedByUserId
WHERE
	TaskId = @TaskId
GO


IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id=object_id(N'{databaseOwner}{objectQualifier}TaskManagerModule_DeleteTasks') and OBJECTPROPERTY(id, N'IsProcedure')=1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_DeleteTasks
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_DeleteTasks
	@ModuleId int
AS
DELETE FROM
	{databaseOwner}{objectQualifier}TaskManagerModule_Task
WHERE
	ModuleId=@ModuleId
GO


IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id=object_id(N'{databaseOwner}{objectQualifier}TaskManagerModule_DeleteTask') and OBJECTPROPERTY(id, N'IsProcedure')=1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_DeleteTask
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_DeleteTask
	@TaskId int
AS
DELETE FROM
	{databaseOwner}{objectQualifier}TaskManagerModule_Task
WHERE
	TaskId= @TaskId
GO


IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id=object_id(N'{databaseOwner}{objectQualifier}TaskManagerModule_GetTask') and OBJECTPROPERTY(id, N'IsProcedure')=1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_GetTask
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_GetTask
	@TaskId int
AS
Select
	t.TaskId
	, t.ModuleId
	, t.TaskName
	, t.TaskDescription
	, t.AssigneduserId
	, t.TargetCompletionDate
	, t.CreatedOnDate
	, t.CreatedByUserId
	, t.LastModifiedOnDate
	, t.LastModifiedByUserId
	, CI.ContentItemID
	, CI.Content
	, CI.ContentTypeID
	, CI.TabiD
	, CI.ContentKey
	, CI.Indexed
FROM
	{databaseOwner}{objectQualifier}TaskManagerModule_Task t
	INNER JOIN {databaseOwner}{objectQualifier}ContentItems AS CI ON t.ContentItemId = CI.ContentItemID
WHERE
	t.TaskId=@TaskId
GO

IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id=object_id(N'{databaseOwner}{objectQualifier}TaskManagerModule_GetTasks') and OBJECTPROPERTY(id, N'IsProcedure')=1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_GetTasks
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}TaskManagerModule_GetTasks
	@ModuleId int
AS
SELECT
	t.TaskId
	, t.ModuleId
	, t.TaskName
	, t.TaskDescription
	, t.AssigneduserId
	, t.TargetCompletionDate
	, t.CreatedOnDate
	, t.CreatedByUserId
	, t.LastModifiedOnDate
	, t.LastModifiedByUserId
	, CI.ContentItemID
	, CI.Content
	, CI.ContentTypeID
	, CI.TabiD
	, CI.ContentKey
	, CI.Indexed
FROM
	{databaseOwner}{objectQualifier}TaskManagerModule_Task t
	INNER JOIN {databaseOwner}{objectQualifier}ContentItems AS CI ON t.ContentItemId = CI.ContentItemID
WHERE
	t.ModuleId=@ModuleId
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/